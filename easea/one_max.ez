\User declarations:
#define SIZE $PROBLEM_SIZE

float geneMutationProbability = 0.001;
\end

\User functions:
\end

\User CUDA:
\end

\Before everything else function:
\end

\After everything else function:
\end

\At the beginning of each generation function:
\end

\At the end of each generation function:
\end

\At each generation before reduce function:
\end

\User classes:
GenomeClass {
  int x[SIZE];
}
\end

\GenomeClass::display:
\end

\GenomeClass::initialiser:
  for(int i = 0; i < SIZE; i++) {
    Genome.x[i] = random(0, 2);
  }
\end

\GenomeClass::crossover:
  for (int i = 0; i < SIZE; i++) {
    if (tossCoin(0.5)) {
      child.x[i] = parent2.x[i];
    }
  }
\end

\GenomeClass::mutator:
  for (int i = 0; i < SIZE; i++) {
    if (tossCoin(geneMutationProbability)) {
      Genome.x[i] = (Genome.x[i] + 1) % 2;
    }
  }
\end

\GenomeClass::evaluator:
  float sum = 0;
  for (int i = 0; i < SIZE; i++) {
    sum += Genome.x[i];
  }
  return sum;
\end

\User Makefile options:
\end

\Default run parameters:
  Number of generations: 1000
  Time limit: 0 // 0 to disable
  Population size: 100
  Offspring size: 100
  Mutation probability: 1
  Crossover probability: 1
  Evaluator goal: maximise
  Selection operator: Tournament 2
  Surviving parents: 0
  Surviving offspring: 100%
  Reduce parents operator: Tournament 2
  Reduce offspring operator: Tournament 2
  Final reduce operator: Tournament 2

  Elitism: Strong
  Elite: 0
  Print stats: false
  Generate csv stats file: false
  Generate gnuplot script: false
  Generate R script: false
  Plot stats: false

  Remote island model: false
  IP file: ip.txt
  Server port: 2929
  Migration probability: 0.3

  Save population: false
  Start from file: false
\end
